/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { ReferenceField, CollectionField, ObjectField } from "/Users/mrekinox/Desktop/graphql-firebase/src/plugin"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    any<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Any";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    any<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Any";
    file<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "File";
    ref<FieldName extends string>(name: FieldName, config: ReferenceField): void
    object<FieldName extends string>(name: FieldName, config: ObjectField): void
    collection<FieldName extends string>(name: FieldName, config: CollectionField): void
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BooleanWhereInput: { // input type
    arrayContains?: boolean | null; // Boolean
    equalTo?: boolean | null; // Boolean
    exists?: boolean | null; // Boolean
    greaterThan?: boolean | null; // Boolean
    greaterThanOrEqualTo?: boolean | null; // Boolean
    in?: Array<boolean | null> | null; // [Boolean]
    lessThan?: boolean | null; // Boolean
    lessThanOrEqualTo?: boolean | null; // Boolean
    notEqualTo?: boolean | null; // Boolean
    notIn?: Array<boolean | null> | null; // [Boolean]
  }
  CreateFolderDocumentFileInput: { // input type
    name: string; // String!
  }
  CreateFolderDocumentInput: { // input type
    file?: NexusGenInputs['FolderDocumentFileCollectionInput'] | null; // FolderDocumentFileCollectionInput
    name: string; // String!
  }
  CreateFolderInput: { // input type
    documents?: NexusGenInputs['FolderDocumentCollectionInput'] | null; // FolderDocumentCollectionInput
    name: string; // String!
  }
  DateWhereInput: { // input type
    arrayContains?: NexusGenScalars['Date'] | null; // Date
    equalTo?: NexusGenScalars['Date'] | null; // Date
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Date'] | null; // Date
    greaterThanOrEqualTo?: NexusGenScalars['Date'] | null; // Date
    in?: Array<NexusGenScalars['Date'] | null> | null; // [Date]
    lessThan?: NexusGenScalars['Date'] | null; // Date
    lessThanOrEqualTo?: NexusGenScalars['Date'] | null; // Date
    notEqualTo?: NexusGenScalars['Date'] | null; // Date
    notIn?: Array<NexusGenScalars['Date'] | null> | null; // [Date]
  }
  DeleteFolderDocumentFileInput: { // input type
    id: string; // ID!
  }
  DeleteFolderDocumentInput: { // input type
    id: string; // ID!
  }
  DeleteFolderInput: { // input type
    id: string; // ID!
  }
  FileWhereInput: { // input type
    exists?: boolean | null; // Boolean
  }
  FolderCollectionInput: { // input type
    createAndAdd?: Array<NexusGenInputs['CreateFolderInput'] | null> | null; // [CreateFolderInput]
    delete?: Array<string | null> | null; // [ID]
    update?: Array<NexusGenInputs['UpdateFolderInput'] | null> | null; // [UpdateFolderInput]
  }
  FolderDocumentCollectionInput: { // input type
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentInput'] | null> | null; // [CreateFolderDocumentInput]
    delete?: Array<string | null> | null; // [ID]
    update?: Array<NexusGenInputs['UpdateFolderDocumentInput'] | null> | null; // [UpdateFolderDocumentInput]
  }
  FolderDocumentFileCollectionInput: { // input type
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentFileInput'] | null> | null; // [CreateFolderDocumentFileInput]
    delete?: Array<string | null> | null; // [ID]
    update?: Array<NexusGenInputs['UpdateFolderDocumentFileInput'] | null> | null; // [UpdateFolderDocumentFileInput]
  }
  FolderDocumentFileReferenceInput: { // input type
    createAndLink?: NexusGenInputs['CreateFolderDocumentFileInput'] | null; // CreateFolderDocumentFileInput
    link?: string | null; // ID
  }
  FolderDocumentFileReferenceListInput: { // input type
    add?: Array<string | null> | null; // [ID]
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentFileInput'] | null> | null; // [CreateFolderDocumentFileInput]
    remove?: Array<string | null> | null; // [ID]
  }
  FolderDocumentFileWhereInput: { // input type
    createdAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
    exists?: boolean | null; // Boolean
    folderDocumentId?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    folderId?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    id?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    name?: NexusGenInputs['StringWhereInput'] | null; // StringWhereInput
    updatedAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
  }
  FolderDocumentReferenceInput: { // input type
    createAndLink?: NexusGenInputs['CreateFolderDocumentInput'] | null; // CreateFolderDocumentInput
    link?: string | null; // ID
  }
  FolderDocumentReferenceListInput: { // input type
    add?: Array<string | null> | null; // [ID]
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentInput'] | null> | null; // [CreateFolderDocumentInput]
    remove?: Array<string | null> | null; // [ID]
  }
  FolderDocumentWhereInput: { // input type
    createdAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
    exists?: boolean | null; // Boolean
    file?: NexusGenInputs['FolderDocumentFileWhereInput'] | null; // FolderDocumentFileWhereInput
    folderId?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    id?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    name?: NexusGenInputs['StringWhereInput'] | null; // StringWhereInput
    updatedAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
  }
  FolderReferenceInput: { // input type
    createAndLink?: NexusGenInputs['CreateFolderInput'] | null; // CreateFolderInput
    link?: string | null; // ID
  }
  FolderReferenceListInput: { // input type
    add?: Array<string | null> | null; // [ID]
    createAndAdd?: Array<NexusGenInputs['CreateFolderInput'] | null> | null; // [CreateFolderInput]
    remove?: Array<string | null> | null; // [ID]
  }
  FolderWhereInput: { // input type
    createdAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
    documents?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    exists?: boolean | null; // Boolean
    id?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    name?: NexusGenInputs['StringWhereInput'] | null; // StringWhereInput
    updatedAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
  }
  IDWhereInput: { // input type
    arrayContains?: string | null; // ID
    equalTo?: string | null; // ID
    exists?: boolean | null; // Boolean
    greaterThan?: string | null; // ID
    greaterThanOrEqualTo?: string | null; // ID
    in?: Array<string | null> | null; // [ID]
    lessThan?: string | null; // ID
    lessThanOrEqualTo?: string | null; // ID
    notEqualTo?: string | null; // ID
    notIn?: Array<string | null> | null; // [ID]
  }
  IntWhereInput: { // input type
    arrayContains?: number | null; // Int
    equalTo?: number | null; // Int
    exists?: boolean | null; // Boolean
    greaterThan?: number | null; // Int
    greaterThanOrEqualTo?: number | null; // Int
    in?: Array<number | null> | null; // [Int]
    lessThan?: number | null; // Int
    lessThanOrEqualTo?: number | null; // Int
    notEqualTo?: number | null; // Int
    notIn?: Array<number | null> | null; // [Int]
  }
  StringWhereInput: { // input type
    arrayContains?: string | null; // String
    equalTo?: string | null; // String
    exists?: boolean | null; // Boolean
    greaterThan?: string | null; // String
    greaterThanOrEqualTo?: string | null; // String
    in?: Array<string | null> | null; // [String]
    lessThan?: string | null; // String
    lessThanOrEqualTo?: string | null; // String
    notEqualTo?: string | null; // String
    notIn?: Array<string | null> | null; // [String]
  }
  UpdateFolderDocumentFieldsInput: { // input type
    file?: NexusGenInputs['FolderDocumentFileCollectionInput'] | null; // FolderDocumentFileCollectionInput
    name?: string | null; // String
  }
  UpdateFolderDocumentFileFieldsInput: { // input type
    name?: string | null; // String
  }
  UpdateFolderDocumentFileInput: { // input type
    fields: NexusGenInputs['UpdateFolderDocumentFileFieldsInput']; // UpdateFolderDocumentFileFieldsInput!
    id: string; // ID!
  }
  UpdateFolderDocumentInput: { // input type
    fields: NexusGenInputs['UpdateFolderDocumentFieldsInput']; // UpdateFolderDocumentFieldsInput!
    id: string; // ID!
  }
  UpdateFolderFieldsInput: { // input type
    documents?: NexusGenInputs['FolderDocumentCollectionInput'] | null; // FolderDocumentCollectionInput
    name?: string | null; // String
  }
  UpdateFolderInput: { // input type
    fields: NexusGenInputs['UpdateFolderFieldsInput']; // UpdateFolderFieldsInput!
    id: string; // ID!
  }
  UploadFileInput: { // input type
    link?: NexusGenInputs['UploadFileLinkInput'] | null; // UploadFileLinkInput
    upload?: NexusGenScalars['Upload'] | null; // Upload
  }
  UploadFileLinkInput: { // input type
    name: string; // String!
    url: string; // String!
  }
  UploadFileListInput: { // input type
    add?: Array<NexusGenScalars['Upload'] | null> | null; // [Upload]
    link?: Array<NexusGenInputs['UploadFileLinkInput'] | null> | null; // [UploadFileLinkInput]
    remove?: Array<string | null> | null; // [String]
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Any: any
  Date: any
  Upload: any
}

export interface NexusGenObjects {
  File: { // root type
    isLinked?: boolean | null; // Boolean
    name?: string | null; // String
    url?: string | null; // String
  }
  Folder: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderCollection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['FolderEdge'] | null> | null; // [FolderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocument: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentCollection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['FolderDocumentEdge'] | null> | null; // [FolderDocumentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocumentEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
  }
  FolderDocumentFile: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    folderDocumentId: string; // ID!
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentFileCollection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['FolderDocumentFileEdge'] | null> | null; // [FolderDocumentFileEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocumentFileEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['FolderDocumentFile'] | null; // FolderDocumentFile
  }
  FolderEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Folder'] | null; // Folder
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  File: { // field return type
    isLinked: boolean | null; // Boolean
    name: string | null; // String
    url: string | null; // String
  }
  Folder: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    documents: NexusGenRootTypes['FolderDocumentCollection'] | null; // FolderDocumentCollection
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderCollection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['FolderEdge'] | null> | null; // [FolderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocument: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    file: NexusGenRootTypes['FolderDocumentFileCollection'] | null; // FolderDocumentFileCollection
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentCollection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['FolderDocumentEdge'] | null> | null; // [FolderDocumentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocumentEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
  }
  FolderDocumentFile: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    folderDocumentId: string; // ID!
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentFileCollection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['FolderDocumentFileEdge'] | null> | null; // [FolderDocumentFileEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderDocumentFileEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['FolderDocumentFile'] | null; // FolderDocumentFile
  }
  FolderEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Folder'] | null; // Folder
  }
  Mutation: { // field return type
    createFolder: NexusGenRootTypes['Folder'] | null; // Folder
    createFolderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
    createFolderDocumentFile: NexusGenRootTypes['FolderDocumentFile'] | null; // FolderDocumentFile
    deleteFolder: boolean | null; // Boolean
    deleteFolderDocument: boolean | null; // Boolean
    deleteFolderDocumentFile: boolean | null; // Boolean
    updateFolder: NexusGenRootTypes['Folder'] | null; // Folder
    updateFolderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
    updateFolderDocumentFile: NexusGenRootTypes['FolderDocumentFile'] | null; // FolderDocumentFile
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    folder: NexusGenRootTypes['Folder'] | null; // Folder
    folderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
    folderDocumentFile: NexusGenRootTypes['FolderDocumentFile'] | null; // FolderDocumentFile
    folderDocumentFiles: NexusGenRootTypes['FolderDocumentFileCollection'] | null; // FolderDocumentFileCollection
    folderDocuments: NexusGenRootTypes['FolderDocumentCollection'] | null; // FolderDocumentCollection
    folders: NexusGenRootTypes['FolderCollection'] | null; // FolderCollection
  }
}

export interface NexusGenFieldTypeNames {
  File: { // field return type name
    isLinked: 'Boolean'
    name: 'String'
    url: 'String'
  }
  Folder: { // field return type name
    createdAt: 'Date'
    documents: 'FolderDocumentCollection'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
  }
  FolderCollection: { // field return type name
    count: 'Int'
    edges: 'FolderEdge'
    pageInfo: 'PageInfo'
  }
  FolderDocument: { // field return type name
    createdAt: 'Date'
    file: 'FolderDocumentFileCollection'
    folderId: 'ID'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
  }
  FolderDocumentCollection: { // field return type name
    count: 'Int'
    edges: 'FolderDocumentEdge'
    pageInfo: 'PageInfo'
  }
  FolderDocumentEdge: { // field return type name
    cursor: 'String'
    node: 'FolderDocument'
  }
  FolderDocumentFile: { // field return type name
    createdAt: 'Date'
    folderDocumentId: 'ID'
    folderId: 'ID'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
  }
  FolderDocumentFileCollection: { // field return type name
    count: 'Int'
    edges: 'FolderDocumentFileEdge'
    pageInfo: 'PageInfo'
  }
  FolderDocumentFileEdge: { // field return type name
    cursor: 'String'
    node: 'FolderDocumentFile'
  }
  FolderEdge: { // field return type name
    cursor: 'String'
    node: 'Folder'
  }
  Mutation: { // field return type name
    createFolder: 'Folder'
    createFolderDocument: 'FolderDocument'
    createFolderDocumentFile: 'FolderDocumentFile'
    deleteFolder: 'Boolean'
    deleteFolderDocument: 'Boolean'
    deleteFolderDocumentFile: 'Boolean'
    updateFolder: 'Folder'
    updateFolderDocument: 'FolderDocument'
    updateFolderDocumentFile: 'FolderDocumentFile'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    folder: 'Folder'
    folderDocument: 'FolderDocument'
    folderDocumentFile: 'FolderDocumentFile'
    folderDocumentFiles: 'FolderDocumentFileCollection'
    folderDocuments: 'FolderDocumentCollection'
    folders: 'FolderCollection'
  }
}

export interface NexusGenArgTypes {
  Folder: {
    documents: { // args
      limit: number | null; // Int
      offset?: number | null; // Int
      where?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    }
  }
  FolderDocument: {
    file: { // args
      limit: number | null; // Int
      offset?: number | null; // Int
      where?: NexusGenInputs['FolderDocumentFileWhereInput'] | null; // FolderDocumentFileWhereInput
    }
  }
  Mutation: {
    createFolder: { // args
      input: NexusGenInputs['CreateFolderInput']; // CreateFolderInput!
    }
    createFolderDocument: { // args
      folderId: string; // ID!
      input: NexusGenInputs['CreateFolderDocumentInput']; // CreateFolderDocumentInput!
    }
    createFolderDocumentFile: { // args
      folderDocumentId: string; // ID!
      folderId: string; // ID!
      input: NexusGenInputs['CreateFolderDocumentFileInput']; // CreateFolderDocumentFileInput!
    }
    deleteFolder: { // args
      input: NexusGenInputs['DeleteFolderInput']; // DeleteFolderInput!
    }
    deleteFolderDocument: { // args
      folderId: string; // ID!
      input: NexusGenInputs['DeleteFolderDocumentInput']; // DeleteFolderDocumentInput!
    }
    deleteFolderDocumentFile: { // args
      folderDocumentId: string; // ID!
      folderId: string; // ID!
      input: NexusGenInputs['DeleteFolderDocumentFileInput']; // DeleteFolderDocumentFileInput!
    }
    updateFolder: { // args
      input: NexusGenInputs['UpdateFolderInput']; // UpdateFolderInput!
    }
    updateFolderDocument: { // args
      folderId: string; // ID!
      input: NexusGenInputs['UpdateFolderDocumentInput']; // UpdateFolderDocumentInput!
    }
    updateFolderDocumentFile: { // args
      folderDocumentId: string; // ID!
      folderId: string; // ID!
      input: NexusGenInputs['UpdateFolderDocumentFileInput']; // UpdateFolderDocumentFileInput!
    }
  }
  Query: {
    folder: { // args
      id: string; // ID!
    }
    folderDocument: { // args
      folderId: string; // ID!
      id: string; // ID!
    }
    folderDocumentFile: { // args
      folderDocumentId: string; // ID!
      folderId: string; // ID!
      id: string; // ID!
    }
    folderDocumentFiles: { // args
      folderDocumentId: string; // ID!
      folderId: string; // ID!
      limit: number | null; // Int
      offset?: number | null; // Int
      where?: NexusGenInputs['FolderDocumentFileWhereInput'] | null; // FolderDocumentFileWhereInput
    }
    folderDocuments: { // args
      folderId: string; // ID!
      limit: number | null; // Int
      offset?: number | null; // Int
      where?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    }
    folders: { // args
      limit: number | null; // Int
      offset?: number | null; // Int
      where?: NexusGenInputs['FolderWhereInput'] | null; // FolderWhereInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
    
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}
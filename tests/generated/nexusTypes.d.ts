/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core, connectionPluginCore } from "nexus"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName> & { count?: connectionPluginCore.ConnectionFieldResolver<TypeName, FieldName, "count"> }
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BooleanWhereInput: { // input type
    equalTo?: boolean | null; // Boolean
    exists?: boolean | null; // Boolean
    greaterThan?: boolean | null; // Boolean
    greaterThanOrEqualTo?: boolean | null; // Boolean
    in?: Array<boolean | null> | null; // [Boolean]
    lessThan?: boolean | null; // Boolean
    lessThanOrEqualTo?: boolean | null; // Boolean
    notEqualTo?: boolean | null; // Boolean
    notIn?: Array<boolean | null> | null; // [Boolean]
  }
  CountryWhereInput: { // input type
    equalTo?: NexusGenScalars['Country'] | null; // Country
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Country'] | null; // Country
    greaterThanOrEqualTo?: NexusGenScalars['Country'] | null; // Country
    in?: Array<NexusGenScalars['Country'] | null> | null; // [Country]
    lessThan?: NexusGenScalars['Country'] | null; // Country
    lessThanOrEqualTo?: NexusGenScalars['Country'] | null; // Country
    notEqualTo?: NexusGenScalars['Country'] | null; // Country
    notIn?: Array<NexusGenScalars['Country'] | null> | null; // [Country]
  }
  CreateFolderDocumentInput: { // input type
    name: string; // String!
  }
  CreateFolderInput: { // input type
    documents?: NexusGenInputs['FolderDocumentCollectionInput'] | null; // FolderDocumentCollectionInput
  }
  DateWhereInput: { // input type
    equalTo?: NexusGenScalars['Date'] | null; // Date
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Date'] | null; // Date
    greaterThanOrEqualTo?: NexusGenScalars['Date'] | null; // Date
    in?: Array<NexusGenScalars['Date'] | null> | null; // [Date]
    lessThan?: NexusGenScalars['Date'] | null; // Date
    lessThanOrEqualTo?: NexusGenScalars['Date'] | null; // Date
    notEqualTo?: NexusGenScalars['Date'] | null; // Date
    notIn?: Array<NexusGenScalars['Date'] | null> | null; // [Date]
  }
  DeleteFolderDocumentInput: { // input type
    id: string; // ID!
  }
  DeleteFolderInput: { // input type
    id: string; // ID!
  }
  EmailWhereInput: { // input type
    equalTo?: NexusGenScalars['Email'] | null; // Email
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Email'] | null; // Email
    greaterThanOrEqualTo?: NexusGenScalars['Email'] | null; // Email
    in?: Array<NexusGenScalars['Email'] | null> | null; // [Email]
    lessThan?: NexusGenScalars['Email'] | null; // Email
    lessThanOrEqualTo?: NexusGenScalars['Email'] | null; // Email
    notEqualTo?: NexusGenScalars['Email'] | null; // Email
    notIn?: Array<NexusGenScalars['Email'] | null> | null; // [Email]
  }
  FileWhereInput: { // input type
    exists?: boolean | null; // Boolean
  }
  FolderCollectionInput: { // input type
    createAndAdd?: Array<NexusGenInputs['CreateFolderInput'] | null> | null; // [CreateFolderInput]
    delete?: Array<string | null> | null; // [ID]
    update?: Array<NexusGenInputs['UpdateFolderInput'] | null> | null; // [UpdateFolderInput]
  }
  FolderDocumentCollectionInput: { // input type
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentInput'] | null> | null; // [CreateFolderDocumentInput]
    delete?: Array<string | null> | null; // [ID]
    update?: Array<NexusGenInputs['UpdateFolderDocumentInput'] | null> | null; // [UpdateFolderDocumentInput]
  }
  FolderDocumentOrderByInput: { // input type
    createdAt?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    id?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    name?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    updatedAt?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
  }
  FolderDocumentPointerInput: { // input type
    createAndLink?: NexusGenInputs['CreateFolderDocumentInput'] | null; // CreateFolderDocumentInput
    link?: string | null; // ID
  }
  FolderDocumentRelationInput: { // input type
    add?: Array<string | null> | null; // [ID]
    createAndAdd?: Array<NexusGenInputs['CreateFolderDocumentInput'] | null> | null; // [CreateFolderDocumentInput]
    remove?: Array<string | null> | null; // [ID]
  }
  FolderDocumentWhereInput: { // input type
    createdAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
    id?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    name?: NexusGenInputs['StringWhereInput'] | null; // StringWhereInput
    updatedAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
  }
  FolderOrderByInput: { // input type
    createdAt?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    documents?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    id?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
    updatedAt?: NexusGenEnums['OrderByEnum'] | null; // OrderByEnum
  }
  FolderPointerInput: { // input type
    createAndLink?: NexusGenInputs['CreateFolderInput'] | null; // CreateFolderInput
    link?: string | null; // ID
  }
  FolderRelationInput: { // input type
    add?: Array<string | null> | null; // [ID]
    createAndAdd?: Array<NexusGenInputs['CreateFolderInput'] | null> | null; // [CreateFolderInput]
    remove?: Array<string | null> | null; // [ID]
  }
  FolderWhereInput: { // input type
    createdAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
    documents?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    id?: NexusGenInputs['IDWhereInput'] | null; // IDWhereInput
    updatedAt?: NexusGenInputs['DateWhereInput'] | null; // DateWhereInput
  }
  IDWhereInput: { // input type
    equalTo?: string | null; // ID
    exists?: boolean | null; // Boolean
    greaterThan?: string | null; // ID
    greaterThanOrEqualTo?: string | null; // ID
    in?: Array<string | null> | null; // [ID]
    lessThan?: string | null; // ID
    lessThanOrEqualTo?: string | null; // ID
    notEqualTo?: string | null; // ID
    notIn?: Array<string | null> | null; // [ID]
  }
  NumberWhereInput: { // input type
    equalTo?: NexusGenScalars['Number'] | null; // Number
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Number'] | null; // Number
    greaterThanOrEqualTo?: NexusGenScalars['Number'] | null; // Number
    in?: Array<NexusGenScalars['Number'] | null> | null; // [Number]
    lessThan?: NexusGenScalars['Number'] | null; // Number
    lessThanOrEqualTo?: NexusGenScalars['Number'] | null; // Number
    notEqualTo?: NexusGenScalars['Number'] | null; // Number
    notIn?: Array<NexusGenScalars['Number'] | null> | null; // [Number]
  }
  PhoneWhereInput: { // input type
    equalTo?: NexusGenScalars['Phone'] | null; // Phone
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Phone'] | null; // Phone
    greaterThanOrEqualTo?: NexusGenScalars['Phone'] | null; // Phone
    in?: Array<NexusGenScalars['Phone'] | null> | null; // [Phone]
    lessThan?: NexusGenScalars['Phone'] | null; // Phone
    lessThanOrEqualTo?: NexusGenScalars['Phone'] | null; // Phone
    notEqualTo?: NexusGenScalars['Phone'] | null; // Phone
    notIn?: Array<NexusGenScalars['Phone'] | null> | null; // [Phone]
  }
  StringWhereInput: { // input type
    equalTo?: string | null; // String
    exists?: boolean | null; // Boolean
    greaterThan?: string | null; // String
    greaterThanOrEqualTo?: string | null; // String
    in?: Array<string | null> | null; // [String]
    lessThan?: string | null; // String
    lessThanOrEqualTo?: string | null; // String
    notEqualTo?: string | null; // String
    notIn?: Array<string | null> | null; // [String]
  }
  UpdateFolderDocumentFieldsInput: { // input type
    name?: string | null; // String
  }
  UpdateFolderDocumentInput: { // input type
    fields: NexusGenInputs['UpdateFolderDocumentFieldsInput']; // UpdateFolderDocumentFieldsInput!
    id: string; // ID!
  }
  UpdateFolderFieldsInput: { // input type
    documents?: NexusGenInputs['FolderDocumentCollectionInput'] | null; // FolderDocumentCollectionInput
  }
  UpdateFolderInput: { // input type
    fields: NexusGenInputs['UpdateFolderFieldsInput']; // UpdateFolderFieldsInput!
    id: string; // ID!
  }
  UploadFileInput: { // input type
    link?: NexusGenInputs['UploadFileLinkInput'] | null; // UploadFileLinkInput
    upload?: NexusGenScalars['Upload'] | null; // Upload
  }
  UploadFileLinkInput: { // input type
    name: string; // String!
    url: string; // String!
  }
  UploadFileListInput: { // input type
    add?: Array<NexusGenScalars['Upload'] | null> | null; // [Upload]
    link?: Array<NexusGenInputs['UploadFileLinkInput'] | null> | null; // [UploadFileLinkInput]
    remove?: Array<string | null> | null; // [String]
  }
}

export interface NexusGenEnums {
  OrderByEnum: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Any: any
  Country: any
  Date: any
  Email: any
  Number: any
  Phone: any
  Upload: any
}

export interface NexusGenObjects {
  File: { // root type
    isLinked?: boolean | null; // Boolean
    name?: string | null; // String
    url?: string | null; // String
  }
  Folder: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocument: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
  }
  FolderDocumentsCollection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['FolderDocumentEdge'] | null> | null; // [FolderDocumentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Folder'] | null; // Folder
  }
  FoldersCollection: { // root type
    count?: number | null; // Int
    edges?: Array<NexusGenRootTypes['FolderEdge'] | null> | null; // [FolderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  File: { // field return type
    isLinked: boolean | null; // Boolean
    name: string | null; // String
    url: string | null; // String
  }
  Folder: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    documents: NexusGenRootTypes['FolderDocumentsCollection'] | null; // FolderDocumentsCollection
    id: string; // ID!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocument: { // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    folderId: string; // ID!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  }
  FolderDocumentEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
  }
  FolderDocumentsCollection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['FolderDocumentEdge'] | null> | null; // [FolderDocumentEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  FolderEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Folder'] | null; // Folder
  }
  FoldersCollection: { // field return type
    count: number | null; // Int
    edges: Array<NexusGenRootTypes['FolderEdge'] | null> | null; // [FolderEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  Mutation: { // field return type
    createFolder: NexusGenRootTypes['Folder'] | null; // Folder
    createFolderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
    deleteFolder: boolean | null; // Boolean
    deleteFolderDocument: boolean | null; // Boolean
    updateFolder: NexusGenRootTypes['Folder'] | null; // Folder
    updateFolderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    folder: NexusGenRootTypes['Folder'] | null; // Folder
    folderDocument: NexusGenRootTypes['FolderDocument'] | null; // FolderDocument
    folderDocuments: NexusGenRootTypes['FolderDocumentsCollection'] | null; // FolderDocumentsCollection
    folders: NexusGenRootTypes['FoldersCollection'] | null; // FoldersCollection
  }
}

export interface NexusGenFieldTypeNames {
  File: { // field return type name
    isLinked: 'Boolean'
    name: 'String'
    url: 'String'
  }
  Folder: { // field return type name
    createdAt: 'Date'
    documents: 'FolderDocumentsCollection'
    id: 'ID'
    updatedAt: 'Date'
  }
  FolderDocument: { // field return type name
    createdAt: 'Date'
    folderId: 'ID'
    id: 'ID'
    name: 'String'
    updatedAt: 'Date'
  }
  FolderDocumentEdge: { // field return type name
    cursor: 'String'
    node: 'FolderDocument'
  }
  FolderDocumentsCollection: { // field return type name
    count: 'Int'
    edges: 'FolderDocumentEdge'
    pageInfo: 'PageInfo'
  }
  FolderEdge: { // field return type name
    cursor: 'String'
    node: 'Folder'
  }
  FoldersCollection: { // field return type name
    count: 'Int'
    edges: 'FolderEdge'
    pageInfo: 'PageInfo'
  }
  Mutation: { // field return type name
    createFolder: 'Folder'
    createFolderDocument: 'FolderDocument'
    deleteFolder: 'Boolean'
    deleteFolderDocument: 'Boolean'
    updateFolder: 'Folder'
    updateFolderDocument: 'FolderDocument'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    folder: 'Folder'
    folderDocument: 'FolderDocument'
    folderDocuments: 'FolderDocumentsCollection'
    folders: 'FoldersCollection'
  }
}

export interface NexusGenArgTypes {
  Folder: {
    documents: { // args
      limit: number | null; // Int
      offset?: number | null; // Int
      orderBy?: NexusGenInputs['FolderDocumentOrderByInput'] | null; // FolderDocumentOrderByInput
      where?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    }
  }
  Mutation: {
    createFolder: { // args
      input: NexusGenInputs['CreateFolderInput']; // CreateFolderInput!
    }
    createFolderDocument: { // args
      folderId: string; // ID!
      input: NexusGenInputs['CreateFolderDocumentInput']; // CreateFolderDocumentInput!
    }
    deleteFolder: { // args
      input: NexusGenInputs['DeleteFolderInput']; // DeleteFolderInput!
    }
    deleteFolderDocument: { // args
      folderId: string; // ID!
      input: NexusGenInputs['DeleteFolderDocumentInput']; // DeleteFolderDocumentInput!
    }
    updateFolder: { // args
      force?: boolean | null; // Boolean
      input: NexusGenInputs['UpdateFolderInput']; // UpdateFolderInput!
    }
    updateFolderDocument: { // args
      folderId: string; // ID!
      force?: boolean | null; // Boolean
      input: NexusGenInputs['UpdateFolderDocumentInput']; // UpdateFolderDocumentInput!
    }
  }
  Query: {
    folder: { // args
      id: string; // ID!
    }
    folderDocument: { // args
      folderId: string; // ID!
      id: string; // ID!
    }
    folderDocuments: { // args
      folderId: string; // ID!
      limit?: number | null; // Int
      offset?: number | null; // Int
      orderBy?: NexusGenInputs['FolderDocumentOrderByInput'] | null; // FolderDocumentOrderByInput
      where?: NexusGenInputs['FolderDocumentWhereInput'] | null; // FolderDocumentWhereInput
    }
    folders: { // args
      limit?: number | null; // Int
      offset?: number | null; // Int
      orderBy?: NexusGenInputs['FolderOrderByInput'] | null; // FolderOrderByInput
      where?: NexusGenInputs['FolderWhereInput'] | null; // FolderWhereInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
    
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}
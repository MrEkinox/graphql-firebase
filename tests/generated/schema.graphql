### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar Any

input BooleanWhereInput {
  equalTo: Boolean
  exists: Boolean
  greaterThan: Boolean
  greaterThanOrEqualTo: Boolean
  in: [Boolean]
  lessThan: Boolean
  lessThanOrEqualTo: Boolean
  notEqualTo: Boolean
  notIn: [Boolean]
}

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar Country

input CountryWhereInput {
  equalTo: Country
  exists: Boolean
  greaterThan: Country
  greaterThanOrEqualTo: Country
  in: [Country]
  lessThan: Country
  lessThanOrEqualTo: Country
  notEqualTo: Country
  notIn: [Country]
}

input CreateFolderDocumentInput {
  name: String!
}

input CreateFolderInput {
  documents: FolderDocumentCollectionInput
}

scalar Date

input DateWhereInput {
  equalTo: Date
  exists: Boolean
  greaterThan: Date
  greaterThanOrEqualTo: Date
  in: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  notEqualTo: Date
  notIn: [Date]
}

input DeleteFolderDocumentInput {
  id: ID!
}

input DeleteFolderInput {
  id: ID!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar Email @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailWhereInput {
  equalTo: Email
  exists: Boolean
  greaterThan: Email
  greaterThanOrEqualTo: Email
  in: [Email]
  lessThan: Email
  lessThanOrEqualTo: Email
  notEqualTo: Email
  notIn: [Email]
}

type File {
  isLinked: Boolean
  name: String
  url: String
}

input FileWhereInput {
  exists: Boolean
}

type Folder {
  createdAt: Date!
  documents(limit: Int = 50, offset: Int = 0, orderBy: FolderDocumentOrderByInput, where: FolderDocumentWhereInput): FolderDocumentsCollection
  id: ID!
  updatedAt: Date!
}

input FolderCollectionInput {
  createAndAdd: [CreateFolderInput]
  delete: [ID]
  update: [UpdateFolderInput]
}

type FolderDocument {
  createdAt: Date!
  folderId: ID!
  id: ID!
  name: String!
  updatedAt: Date!
}

input FolderDocumentCollectionInput {
  createAndAdd: [CreateFolderDocumentInput]
  delete: [ID]
  update: [UpdateFolderDocumentInput]
}

type FolderDocumentEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: FolderDocument
}

input FolderDocumentOrderByInput {
  createdAt: OrderByEnum
  id: OrderByEnum
  name: OrderByEnum
  updatedAt: OrderByEnum
}

input FolderDocumentPointerInput {
  createAndLink: CreateFolderDocumentInput
  link: ID
}

input FolderDocumentRelationInput {
  add: [ID]
  createAndAdd: [CreateFolderDocumentInput]
  remove: [ID]
}

input FolderDocumentWhereInput {
  createdAt: DateWhereInput
  id: IDWhereInput
  name: StringWhereInput
  updatedAt: DateWhereInput
}

type FolderDocumentsCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FolderDocumentEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FolderEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Folder
}

input FolderOrderByInput {
  createdAt: OrderByEnum
  documents: OrderByEnum
  id: OrderByEnum
  updatedAt: OrderByEnum
}

input FolderPointerInput {
  createAndLink: CreateFolderInput
  link: ID
}

input FolderRelationInput {
  add: [ID]
  createAndAdd: [CreateFolderInput]
  remove: [ID]
}

input FolderWhereInput {
  createdAt: DateWhereInput
  documents: FolderDocumentWhereInput
  id: IDWhereInput
  updatedAt: DateWhereInput
}

type FoldersCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FolderEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input IDWhereInput {
  equalTo: ID
  exists: Boolean
  greaterThan: ID
  greaterThanOrEqualTo: ID
  in: [ID]
  lessThan: ID
  lessThanOrEqualTo: ID
  notEqualTo: ID
  notIn: [ID]
}

type Mutation {
  createFolder(input: CreateFolderInput!): Folder
  createFolderDocument(folderId: ID!, input: CreateFolderDocumentInput!): FolderDocument
  deleteFolder(input: DeleteFolderInput!): Boolean
  deleteFolderDocument(folderId: ID!, input: DeleteFolderDocumentInput!): Boolean
  updateFolder(force: Boolean, input: UpdateFolderInput!): Folder
  updateFolderDocument(folderId: ID!, force: Boolean, input: UpdateFolderDocumentInput!): FolderDocument
}

scalar Number

input NumberWhereInput {
  equalTo: Number
  exists: Boolean
  greaterThan: Number
  greaterThanOrEqualTo: Number
  in: [Number]
  lessThan: Number
  lessThanOrEqualTo: Number
  notEqualTo: Number
  notIn: [Number]
}

enum OrderByEnum {
  asc
  desc
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar Phone

input PhoneWhereInput {
  equalTo: Phone
  exists: Boolean
  greaterThan: Phone
  greaterThanOrEqualTo: Phone
  in: [Phone]
  lessThan: Phone
  lessThanOrEqualTo: Phone
  notEqualTo: Phone
  notIn: [Phone]
}

type Query {
  folder(id: ID!): Folder
  folderDocument(folderId: ID!, id: ID!): FolderDocument
  folderDocuments(folderId: ID!, limit: Int, offset: Int, orderBy: FolderDocumentOrderByInput, where: FolderDocumentWhereInput): FolderDocumentsCollection
  folders(limit: Int, offset: Int, orderBy: FolderOrderByInput, where: FolderWhereInput): FoldersCollection
}

input StringWhereInput {
  equalTo: String
  exists: Boolean
  greaterThan: String
  greaterThanOrEqualTo: String
  in: [String]
  lessThan: String
  lessThanOrEqualTo: String
  notEqualTo: String
  notIn: [String]
}

input UpdateFolderDocumentFieldsInput {
  name: String
}

input UpdateFolderDocumentInput {
  fields: UpdateFolderDocumentFieldsInput!
  id: ID!
}

input UpdateFolderFieldsInput {
  documents: FolderDocumentCollectionInput
}

input UpdateFolderInput {
  fields: UpdateFolderFieldsInput!
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  link: UploadFileLinkInput
  upload: Upload
}

input UploadFileLinkInput {
  name: String!
  url: String!
}

input UploadFileListInput {
  add: [Upload]
  link: [UploadFileLinkInput]
  remove: [String]
}
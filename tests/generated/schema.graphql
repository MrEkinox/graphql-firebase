### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar Any

input BooleanWhereInput {
  arrayContains: Boolean
  equalTo: Boolean
  exists: Boolean
  greaterThan: Boolean
  greaterThanOrEqualTo: Boolean
  in: [Boolean]
  lessThan: Boolean
  lessThanOrEqualTo: Boolean
  notEqualTo: Boolean
  notIn: [Boolean]
}

input CreateCustomObject2Input {
  customObject3: CreateCustomObject3Input
  test: String
  test2: String
}

input CreateCustomObject3Input {
  test: String
}

input CreateCustomObjectInput {
  customObject2: CreateCustomObject2Input
  test: String!
  test8: String
  viewNumber: Int
  viewNumber2: Int
}

input CreateLikeInput {
  any: Any
  array: [String]
  boolean: Boolean
  createdBy: UserReferenceInput
  customObject: CreateCustomObjectInput
  endDate: Date
  meetDate: Date
  testEnm2: TestEnum
  testEnum: TestEnum
  users: UserReferenceListInput!
  viewNumber: Int
  viewNumber2: Int
}

input CreateUserInput {
  username: String!
}

type CustomObject {
  customObject2: CustomObject2
  test: String!
  test8: String
  viewNumber: Int
  viewNumber2: Int
}

type CustomObject2 {
  customObject3: CustomObject3
  test: String
  test2: String
}

input CustomObject2WhereInput {
  customObject3: CustomObject3WhereInput
  exists: Boolean
  test: StringWhereInput
  test2: StringWhereInput
}

type CustomObject3 {
  test: String
}

input CustomObject3WhereInput {
  exists: Boolean
  test: StringWhereInput
}

input CustomObjectWhereInput {
  customObject2: CustomObject2WhereInput
  exists: Boolean
  test: StringWhereInput
  test8: StringWhereInput
  viewNumber: IntWhereInput
  viewNumber2: IntWhereInput
}

scalar Date

input DateWhereInput {
  arrayContains: Date
  equalTo: Date
  exists: Boolean
  greaterThan: Date
  greaterThanOrEqualTo: Date
  in: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  notEqualTo: Date
  notIn: [Date]
}

input DeleteLikeInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

type File {
  isLinked: Boolean
  name: String
  url: String
}

input FileWhereInput {
  exists: Boolean
}

input IDWhereInput {
  arrayContains: ID
  equalTo: ID
  exists: Boolean
  greaterThan: ID
  greaterThanOrEqualTo: ID
  in: [ID]
  lessThan: ID
  lessThanOrEqualTo: ID
  notEqualTo: ID
  notIn: [ID]
}

input IntWhereInput {
  arrayContains: Int
  equalTo: Int
  exists: Boolean
  greaterThan: Int
  greaterThanOrEqualTo: Int
  in: [Int]
  lessThan: Int
  lessThanOrEqualTo: Int
  notEqualTo: Int
  notIn: [Int]
}

type Like {
  any: Any
  array: [String]
  boolean: Boolean
  createdAt: Date!
  createdBy: User
  customObject: CustomObject
  endDate: Date
  id: ID!
  meetDate: Date
  testEnm2: TestEnum
  testEnum: TestEnum
  updatedAt: Date!
  users: [User!]!
  viewNumber: Int
  viewNumber2: Int
}

type LikeCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LikeEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input LikeCollectionInput {
  createAndAdd: [CreateLikeInput]
  delete: [ID]
  update: [UpdateLikeInput]
}

type LikeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Like
}

input LikeReferenceInput {
  createAndLink: CreateLikeInput
  link: ID
}

input LikeReferenceListInput {
  add: [ID]
  createAndAdd: [CreateLikeInput]
  remove: [ID]
}

input LikeWhereInput {
  any: Any
  array: StringWhereInput
  boolean: BooleanWhereInput
  createdAt: DateWhereInput
  createdBy: UserWhereInput
  customObject: CustomObjectWhereInput
  endDate: DateWhereInput
  exists: Boolean
  id: IDWhereInput
  meetDate: DateWhereInput
  testEnm2: TestEnumWhereInput
  testEnum: TestEnumWhereInput
  updatedAt: DateWhereInput
  users: UserWhereInput
  viewNumber: IntWhereInput
  viewNumber2: IntWhereInput
}

type Mutation {
  createLike(input: CreateLikeInput!): Like
  createUser(input: CreateUserInput!): User
  deleteLike(input: DeleteLikeInput!): Boolean
  deleteUser(input: DeleteUserInput!): Boolean
  updateLike(force: Boolean, input: UpdateLikeInput!): Like
  updateUser(force: Boolean, input: UpdateUserInput!): User
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  like(id: ID!): Like
  likes(limit: Int = 50, offset: Int = 0, where: LikeWhereInput): LikeCollection
  user(id: ID!): User
  users(limit: Int = 50, offset: Int = 0, where: UserWhereInput): UserCollection
}

input StringWhereInput {
  arrayContains: String
  equalTo: String
  exists: Boolean
  greaterThan: String
  greaterThanOrEqualTo: String
  in: [String]
  lessThan: String
  lessThanOrEqualTo: String
  notEqualTo: String
  notIn: [String]
}

enum TestEnum {
  other
}

input TestEnumWhereInput {
  arrayContains: TestEnum
  equalTo: TestEnum
  exists: Boolean
  greaterThan: TestEnum
  greaterThanOrEqualTo: TestEnum
  in: [TestEnum]
  lessThan: TestEnum
  lessThanOrEqualTo: TestEnum
  notEqualTo: TestEnum
  notIn: [TestEnum]
}

input UpdateCustomObject2Input {
  customObject3: UpdateCustomObject3Input
  test: String
  test2: String
}

input UpdateCustomObject3Input {
  test: String
}

input UpdateCustomObjectInput {
  customObject2: UpdateCustomObject2Input
  test: String
  test8: String
  viewNumber: Int
  viewNumber2: Int
}

input UpdateLikeFieldsInput {
  any: Any
  array: [String]
  boolean: Boolean
  createdBy: UserReferenceInput
  customObject: UpdateCustomObjectInput
  endDate: Date
  meetDate: Date
  testEnm2: TestEnum
  testEnum: TestEnum
  users: UserReferenceListInput
  viewNumber: Int
  viewNumber2: Int
}

input UpdateLikeInput {
  fields: UpdateLikeFieldsInput!
  id: ID!
}

input UpdateUserFieldsInput {
  username: String
}

input UpdateUserInput {
  fields: UpdateUserFieldsInput!
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  link: UploadFileLinkInput
  upload: Upload
}

input UploadFileLinkInput {
  name: String!
  url: String!
}

input UploadFileListInput {
  add: [Upload]
  link: [UploadFileLinkInput]
  remove: [String]
}

type User {
  createdAt: Date!
  id: ID!
  updatedAt: Date!
  username: String!
}

type UserCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input UserCollectionInput {
  createAndAdd: [CreateUserInput]
  delete: [ID]
  update: [UpdateUserInput]
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserReferenceInput {
  createAndLink: CreateUserInput
  link: ID
}

input UserReferenceListInput {
  add: [ID]
  createAndAdd: [CreateUserInput]
  remove: [ID]
}

input UserWhereInput {
  createdAt: DateWhereInput
  exists: Boolean
  id: IDWhereInput
  updatedAt: DateWhereInput
  username: StringWhereInput
}
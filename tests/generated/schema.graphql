### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar Any

input BooleanWhereInput {
  equalTo: Boolean
  exists: Boolean
  greaterThan: Boolean
  greaterThanOrEqualTo: Boolean
  in: [Boolean]
  lessThan: Boolean
  lessThanOrEqualTo: Boolean
  notEqualTo: Boolean
  notIn: [Boolean]
}

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar Country

input CountryWhereInput {
  equalTo: Country
  exists: Boolean
  greaterThan: Country
  greaterThanOrEqualTo: Country
  in: [Country]
  lessThan: Country
  lessThanOrEqualTo: Country
  notEqualTo: Country
  notIn: [Country]
}

input CreateGroupInput {
  messages: GroupMessageCollectionInput
  name: String
  users: UserRelationInput!
}

input CreateGroupMessageInput {
  createdBy: UserPointerInput
  image: UploadFileInput
  text: String
}

input CreateUserInput {
  avatar: UploadFileInput
  birthDate: Date
  customEnum: CustomEnum
  customScalar: CustomScalar
  customType: UserCustomTypeInput
  email: String!
  number: Number
  username: String!
}

enum CustomEnum {
  Member1
  Member2
}

input CustomEnumWhereInput {
  equalTo: CustomEnum
  exists: Boolean
  greaterThan: CustomEnum
  greaterThanOrEqualTo: CustomEnum
  in: [CustomEnum]
  lessThan: CustomEnum
  lessThanOrEqualTo: CustomEnum
  notEqualTo: CustomEnum
  notIn: [CustomEnum]
}

scalar CustomScalar

input CustomScalarWhereInput {
  equalTo: CustomScalar
  exists: Boolean
  greaterThan: CustomScalar
  greaterThanOrEqualTo: CustomScalar
  in: [CustomScalar]
  lessThan: CustomScalar
  lessThanOrEqualTo: CustomScalar
  notEqualTo: CustomScalar
  notIn: [CustomScalar]
}

scalar Date

input DateWhereInput {
  equalTo: Date
  exists: Boolean
  greaterThan: Date
  greaterThanOrEqualTo: Date
  in: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  notEqualTo: Date
  notIn: [Date]
}

input DeleteGroupInput {
  id: ID!
}

input DeleteGroupMessageInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar Email @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailWhereInput {
  equalTo: Email
  exists: Boolean
  greaterThan: Email
  greaterThanOrEqualTo: Email
  in: [Email]
  lessThan: Email
  lessThanOrEqualTo: Email
  notEqualTo: Email
  notIn: [Email]
}

type File {
  isLinked: Boolean
  name: String
  url: String
}

input FileWhereInput {
  exists: Boolean
}

type Group {
  createdAt: Date!
  id: ID!
  messages(limit: Int = 50, offset: Int = 0, orderBy: GroupMessageOrderByInput, where: GroupMessageWhereInput): GroupMessagesCollection
  name: String
  updatedAt: Date!
  users: [User!]!
}

input GroupCollectionInput {
  createAndAdd: [CreateGroupInput]
  delete: [ID]
}

type GroupEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Group
}

type GroupMessage {
  createdAt: Date!
  createdBy: User
  groupId: ID!
  id: ID!
  image: File
  text: String
  updatedAt: Date!
}

input GroupMessageCollectionInput {
  createAndAdd: [CreateGroupMessageInput]
  delete: [ID]
}

type GroupMessageEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: GroupMessage
}

input GroupMessageOrderByInput {
  createdAt: OrderByEnum
  createdBy: OrderByEnum
  id: OrderByEnum
  image: OrderByEnum
  text: OrderByEnum
  updatedAt: OrderByEnum
}

input GroupMessagePointerInput {
  createAndLink: CreateGroupMessageInput
  link: ID
}

input GroupMessageRelationInput {
  add: [ID]
  createAndAdd: [CreateGroupMessageInput]
  remove: [ID]
}

input GroupMessageWhereInput {
  createdAt: DateWhereInput
  createdBy: UserWhereInput
  id: IDWhereInput
  image: FileWhereInput
  text: StringWhereInput
  updatedAt: DateWhereInput
}

type GroupMessagesCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [GroupMessageEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input GroupOrderByInput {
  createdAt: OrderByEnum
  id: OrderByEnum
  messages: OrderByEnum
  name: OrderByEnum
  updatedAt: OrderByEnum
  users: OrderByEnum
}

input GroupPointerInput {
  createAndLink: CreateGroupInput
  link: ID
}

input GroupRelationInput {
  add: [ID]
  createAndAdd: [CreateGroupInput]
  remove: [ID]
}

input GroupWhereInput {
  createdAt: DateWhereInput
  id: IDWhereInput
  messages: GroupMessageWhereInput
  name: StringWhereInput
  updatedAt: DateWhereInput
  users: UserWhereInput
}

type GroupsCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [GroupEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input IDWhereInput {
  equalTo: ID
  exists: Boolean
  greaterThan: ID
  greaterThanOrEqualTo: ID
  in: [ID]
  lessThan: ID
  lessThanOrEqualTo: ID
  notEqualTo: ID
  notIn: [ID]
}

type Mutation {
  createGroup(input: CreateGroupInput!): Group
  createGroupMessage(groupId: ID!, input: CreateGroupMessageInput!): GroupMessage
  createUser(input: CreateUserInput!): User
  deleteGroup(input: DeleteGroupInput!): Boolean
  deleteGroupMessage(groupId: ID!, input: DeleteGroupMessageInput!): Boolean
  deleteUser(input: DeleteUserInput!): Boolean
  updateGroup(force: Boolean, input: UpdateGroupInput!): Group
  updateGroupMessage(force: Boolean, groupId: ID!, input: UpdateGroupMessageInput!): GroupMessage
  updateUser(force: Boolean, input: UpdateUserInput!): User
}

scalar Number

input NumberWhereInput {
  equalTo: Number
  exists: Boolean
  greaterThan: Number
  greaterThanOrEqualTo: Number
  in: [Number]
  lessThan: Number
  lessThanOrEqualTo: Number
  notEqualTo: Number
  notIn: [Number]
}

enum OrderByEnum {
  asc
  desc
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar Phone

input PhoneWhereInput {
  equalTo: Phone
  exists: Boolean
  greaterThan: Phone
  greaterThanOrEqualTo: Phone
  in: [Phone]
  lessThan: Phone
  lessThanOrEqualTo: Phone
  notEqualTo: Phone
  notIn: [Phone]
}

type Query {
  group(id: ID!): Group
  groupMessage(groupId: ID!, id: ID!): GroupMessage
  groupMessages(groupId: ID!, limit: Int, offset: Int, orderBy: GroupMessageOrderByInput, where: GroupMessageWhereInput): GroupMessagesCollection
  groups(limit: Int, offset: Int, orderBy: GroupOrderByInput, where: GroupWhereInput): GroupsCollection
  user(id: ID!): User
  users(limit: Int, offset: Int, orderBy: UserOrderByInput, where: UserWhereInput): UsersCollection
}

input StringWhereInput {
  equalTo: String
  exists: Boolean
  greaterThan: String
  greaterThanOrEqualTo: String
  in: [String]
  lessThan: String
  lessThanOrEqualTo: String
  notEqualTo: String
  notIn: [String]
}

input UpdateGroupFieldsInput {
  messages: GroupMessageCollectionInput
  name: String
  users: UserRelationInput
}

input UpdateGroupInput {
  fields: UpdateGroupFieldsInput!
  id: ID!
}

input UpdateGroupMessageFieldsInput {
  createdBy: UserPointerInput
  image: UploadFileInput
  text: String
}

input UpdateGroupMessageInput {
  fields: UpdateGroupMessageFieldsInput!
  id: ID!
}

input UpdateUserFieldsInput {
  avatar: UploadFileInput
  birthDate: Date
  customEnum: CustomEnum
  customScalar: CustomScalar
  customType: UserCustomTypeInput
  email: String
  number: Number
  username: String
}

input UpdateUserInput {
  fields: UpdateUserFieldsInput!
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  link: UploadFileLinkInput
  upload: Upload
}

input UploadFileLinkInput {
  name: String!
  url: String!
}

input UploadFileListInput {
  add: [Upload]
  link: [UploadFileLinkInput]
  remove: [String]
}

type User {
  avatar: File
  birthDate: Date
  createdAt: Date!
  customEnum: CustomEnum
  customScalar: CustomScalar
  customType: UserCustomType
  email: String!
  id: ID!
  number: Number
  updatedAt: Date!
  username: String!
}

input UserCollectionInput {
  createAndAdd: [CreateUserInput]
  delete: [ID]
}

type UserCustomType {
  customType2: UserCustomTypeCustomType2
  test: String!
}

type UserCustomTypeCustomType2 {
  test: String
}

input UserCustomTypeCustomType2Input {
  test: String
}

input UserCustomTypeCustomType2WhereInput {
  test: StringWhereInput
}

input UserCustomTypeInput {
  customType2: UserCustomTypeCustomType2Input
  test: String!
}

input UserCustomTypeWhereInput {
  customType2: UserCustomTypeCustomType2WhereInput
  test: StringWhereInput
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderByInput {
  avatar: OrderByEnum
  birthDate: OrderByEnum
  createdAt: OrderByEnum
  customEnum: OrderByEnum
  customScalar: OrderByEnum
  customType: OrderByEnum
  email: OrderByEnum
  id: OrderByEnum
  number: OrderByEnum
  updatedAt: OrderByEnum
  username: OrderByEnum
}

input UserPointerInput {
  createAndLink: CreateUserInput
  link: ID
}

input UserRelationInput {
  add: [ID]
  createAndAdd: [CreateUserInput]
  remove: [ID]
}

input UserWhereInput {
  avatar: FileWhereInput
  birthDate: DateWhereInput
  createdAt: DateWhereInput
  customEnum: CustomEnumWhereInput
  customScalar: CustomScalarWhereInput
  customType: UserCustomTypeWhereInput
  email: StringWhereInput
  id: IDWhereInput
  number: NumberWhereInput
  updatedAt: DateWhereInput
  username: StringWhereInput
}

type UsersCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}
### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar Any

input BooleanWhereInput {
  arrayContains: Boolean
  equalTo: Boolean
  exists: Boolean
  greaterThan: Boolean
  greaterThanOrEqualTo: Boolean
  in: [Boolean]
  lessThan: Boolean
  lessThanOrEqualTo: Boolean
  notEqualTo: Boolean
  notIn: [Boolean]
}

input CreateUserInput {
  multipleDate: [Date]
  multipleFile: UploadFileListInput
  multipleNumber: [Int]
  singleDate: Date
  singleFile: UploadFileInput
  singleNumber: Int
}

scalar Date

input DateWhereInput {
  arrayContains: Date
  equalTo: Date
  exists: Boolean
  greaterThan: Date
  greaterThanOrEqualTo: Date
  in: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  notEqualTo: Date
  notIn: [Date]
}

input DeleteUserInput {
  id: ID!
}

type File {
  isLinked: Boolean
  name: String
  url: String
}

input FileWhereInput {
  exists: Boolean
}

input IDWhereInput {
  arrayContains: ID
  equalTo: ID
  exists: Boolean
  greaterThan: ID
  greaterThanOrEqualTo: ID
  in: [ID]
  lessThan: ID
  lessThanOrEqualTo: ID
  notEqualTo: ID
  notIn: [ID]
}

input IntWhereInput {
  arrayContains: Int
  equalTo: Int
  exists: Boolean
  greaterThan: Int
  greaterThanOrEqualTo: Int
  in: [Int]
  lessThan: Int
  lessThanOrEqualTo: Int
  notEqualTo: Int
  notIn: [Int]
}

type Mutation {
  createUser(input: CreateUserInput!): User
  deleteUser(input: DeleteUserInput!): Boolean
  updateUser(input: UpdateUserInput!): User
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  user(id: ID!): User
  users(limit: Int = 50, offset: Int = 0, where: UserWhereInput): UserCollection
}

input StringWhereInput {
  arrayContains: String
  equalTo: String
  exists: Boolean
  greaterThan: String
  greaterThanOrEqualTo: String
  in: [String]
  lessThan: String
  lessThanOrEqualTo: String
  notEqualTo: String
  notIn: [String]
}

input UpdateUserFieldsInput {
  multipleDate: [Date]
  multipleFile: UploadFileListInput
  multipleNumber: [Int]
  singleDate: Date
  singleFile: UploadFileInput
  singleNumber: Int
}

input UpdateUserInput {
  fields: UpdateUserFieldsInput!
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  link: UploadFileLinkInput
  upload: Upload
}

input UploadFileLinkInput {
  name: String!
  url: String!
}

input UploadFileListInput {
  add: [Upload]
  link: [UploadFileLinkInput]
  remove: [String]
}

type User {
  createdAt: Date!
  id: ID!
  multipleDate: [Date]
  multipleFile: [File]
  multipleNumber: [Int]
  singleDate: Date
  singleFile: File
  singleNumber: Int
  updatedAt: Date!
}

type UserCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input UserCollectionInput {
  createAndAdd: [CreateUserInput]
  delete: [ID]
  update: [UpdateUserInput]
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserReferenceInput {
  createAndLink: CreateUserInput
  link: ID
}

input UserReferenceListInput {
  add: [ID]
  createAndAdd: [CreateUserInput]
  remove: [ID]
}

input UserWhereInput {
  createdAt: DateWhereInput
  exists: Boolean
  id: IDWhereInput
  multipleDate: DateWhereInput
  multipleNumber: IntWhereInput
  singleDate: DateWhereInput
  singleNumber: IntWhereInput
  updatedAt: DateWhereInput
}
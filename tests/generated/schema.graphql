### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar Any

input BooleanWhereInput {
  arrayContains: Boolean
  equalTo: Boolean
  exists: Boolean
  greaterThan: Boolean
  greaterThanOrEqualTo: Boolean
  in: [Boolean]
  lessThan: Boolean
  lessThanOrEqualTo: Boolean
  notEqualTo: Boolean
  notIn: [Boolean]
}

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar Country

input CountryWhereInput {
  arrayContains: Country
  equalTo: Country
  exists: Boolean
  greaterThan: Country
  greaterThanOrEqualTo: Country
  in: [Country]
  lessThan: Country
  lessThanOrEqualTo: Country
  notEqualTo: Country
  notIn: [Country]
}

input CreateLikeInput {
  any: Any
  array: [String]
  boolean: Boolean
  createdBy: UserPointerInput
  customObject: LikeCustomObjectInput
  endDate: Date
  meetDate: Date
  testEnm: TestEnum
  testEnm2: TestEnum
  users: UserRelationInput!
  viewNumber: Number
  viewNumber2: Number
}

input CreateUserInput {
  username: String!
}

scalar Date

input DateWhereInput {
  arrayContains: Date
  equalTo: Date
  exists: Boolean
  greaterThan: Date
  greaterThanOrEqualTo: Date
  in: [Date]
  lessThan: Date
  lessThanOrEqualTo: Date
  notEqualTo: Date
  notIn: [Date]
}

input DeleteLikeInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar Email @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EmailWhereInput {
  arrayContains: Email
  equalTo: Email
  exists: Boolean
  greaterThan: Email
  greaterThanOrEqualTo: Email
  in: [Email]
  lessThan: Email
  lessThanOrEqualTo: Email
  notEqualTo: Email
  notIn: [Email]
}

type File {
  isLinked: Boolean
  name: String
  url: String
}

input FileWhereInput {
  exists: Boolean
}

input IDWhereInput {
  arrayContains: ID
  equalTo: ID
  exists: Boolean
  greaterThan: ID
  greaterThanOrEqualTo: ID
  in: [ID]
  lessThan: ID
  lessThanOrEqualTo: ID
  notEqualTo: ID
  notIn: [ID]
}

type Like {
  any: Any
  array: [String]
  boolean: Boolean
  createdAt: Date!
  createdBy: User
  customObject: LikeCustomObject
  endDate: Date
  id: ID!
  meetDate: Date
  testEnm: TestEnum
  testEnm2: TestEnum
  updatedAt: Date!
  users: [User!]!
  viewNumber: Number
  viewNumber2: Number
}

input LikeCollectionInput {
  createAndAdd: [CreateLikeInput]
  delete: [ID]
  update: [UpdateLikeInput]
}

type LikeCustomObject {
  customObject2: LikeCustomObjectCustomObject2
  test: String!
  test8: String
  viewNumber: Number
  viewNumber2: Number
}

type LikeCustomObjectCustomObject2 {
  customObject3: LikeCustomObjectCustomObject2CustomObject3
  test: String
  test2: String
}

type LikeCustomObjectCustomObject2CustomObject3 {
  test: String
}

input LikeCustomObjectCustomObject2CustomObject3Input {
  test: String
}

input LikeCustomObjectCustomObject2CustomObject3WhereInput {
  exists: Boolean
  test: StringWhereInput
}

input LikeCustomObjectCustomObject2Input {
  customObject3: LikeCustomObjectCustomObject2CustomObject3Input
  test: String
  test2: String
}

input LikeCustomObjectCustomObject2WhereInput {
  customObject3: LikeCustomObjectCustomObject2CustomObject3WhereInput
  exists: Boolean
  test: StringWhereInput
  test2: StringWhereInput
}

input LikeCustomObjectInput {
  customObject2: LikeCustomObjectCustomObject2Input
  test: String!
  test8: String
  viewNumber: Number
  viewNumber2: Number
}

input LikeCustomObjectWhereInput {
  customObject2: LikeCustomObjectCustomObject2WhereInput
  exists: Boolean
  test: StringWhereInput
  test8: StringWhereInput
  viewNumber: NumberWhereInput
  viewNumber2: NumberWhereInput
}

type LikeEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Like
}

input LikeOrderByInput {
  any: OrderByEnum
  array: OrderByEnum
  boolean: OrderByEnum
  createdAt: OrderByEnum
  createdBy: OrderByEnum
  customObject: OrderByEnum
  endDate: OrderByEnum
  id: OrderByEnum
  meetDate: OrderByEnum
  testEnm: OrderByEnum
  testEnm2: OrderByEnum
  updatedAt: OrderByEnum
  users: OrderByEnum
  viewNumber: OrderByEnum
  viewNumber2: OrderByEnum
}

input LikePointerInput {
  createAndLink: CreateLikeInput
  link: ID
}

input LikeRelationInput {
  add: [ID]
  createAndAdd: [CreateLikeInput]
  remove: [ID]
}

input LikeWhereInput {
  any: Any
  array: StringWhereInput
  boolean: BooleanWhereInput
  createdAt: DateWhereInput
  createdBy: UserWhereInput
  customObject: LikeCustomObjectWhereInput
  endDate: DateWhereInput
  exists: Boolean
  id: IDWhereInput
  meetDate: DateWhereInput
  testEnm: TestEnumWhereInput
  testEnm2: TestEnumWhereInput
  updatedAt: DateWhereInput
  users: UserWhereInput
  viewNumber: NumberWhereInput
  viewNumber2: NumberWhereInput
}

type LikesCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LikeEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type Mutation {
  createLike(input: CreateLikeInput!): Like
  createUser(input: CreateUserInput!): User
  deleteLike(input: DeleteLikeInput!): Boolean
  deleteUser(input: DeleteUserInput!): Boolean
  updateLike(force: Boolean, input: UpdateLikeInput!): Like
  updateUser(force: Boolean, input: UpdateUserInput!): User
}

scalar Number

input NumberWhereInput {
  arrayContains: Number
  equalTo: Number
  exists: Boolean
  greaterThan: Number
  greaterThanOrEqualTo: Number
  in: [Number]
  lessThan: Number
  lessThanOrEqualTo: Number
  notEqualTo: Number
  notIn: [Number]
}

enum OrderByEnum {
  asc
  desc
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar Phone

input PhoneWhereInput {
  arrayContains: Phone
  equalTo: Phone
  exists: Boolean
  greaterThan: Phone
  greaterThanOrEqualTo: Phone
  in: [Phone]
  lessThan: Phone
  lessThanOrEqualTo: Phone
  notEqualTo: Phone
  notIn: [Phone]
}

type Query {
  like(id: ID!): Like
  likes(limit: Int, offset: Int, orderBy: LikeOrderByInput, where: LikeWhereInput): LikesCollection
  user(id: ID!): User
  users(limit: Int, offset: Int, orderBy: UserOrderByInput, where: UserWhereInput): UsersCollection
}

input StringWhereInput {
  arrayContains: String
  equalTo: String
  exists: Boolean
  greaterThan: String
  greaterThanOrEqualTo: String
  in: [String]
  lessThan: String
  lessThanOrEqualTo: String
  notEqualTo: String
  notIn: [String]
}

enum TestEnum {
  other
}

input TestEnumWhereInput {
  arrayContains: TestEnum
  equalTo: TestEnum
  exists: Boolean
  greaterThan: TestEnum
  greaterThanOrEqualTo: TestEnum
  in: [TestEnum]
  lessThan: TestEnum
  lessThanOrEqualTo: TestEnum
  notEqualTo: TestEnum
  notIn: [TestEnum]
}

input UpdateLikeFieldsInput {
  any: Any
  array: [String]
  boolean: Boolean
  createdBy: UserPointerInput
  customObject: LikeCustomObjectInput
  endDate: Date
  meetDate: Date
  testEnm: TestEnum
  testEnm2: TestEnum
  users: UserRelationInput
  viewNumber: Number
  viewNumber2: Number
}

input UpdateLikeInput {
  fields: UpdateLikeFieldsInput!
  id: ID!
}

input UpdateUserFieldsInput {
  username: String
}

input UpdateUserInput {
  fields: UpdateUserFieldsInput!
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  link: UploadFileLinkInput
  upload: Upload
}

input UploadFileLinkInput {
  name: String!
  url: String!
}

input UploadFileListInput {
  add: [Upload]
  link: [UploadFileLinkInput]
  remove: [String]
}

type User {
  createdAt: Date!
  id: ID!
  updatedAt: Date!
  username: String!
}

input UserCollectionInput {
  createAndAdd: [CreateUserInput]
  delete: [ID]
  update: [UpdateUserInput]
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserOrderByInput {
  createdAt: OrderByEnum
  id: OrderByEnum
  updatedAt: OrderByEnum
  username: OrderByEnum
}

input UserPointerInput {
  createAndLink: CreateUserInput
  link: ID
}

input UserRelationInput {
  add: [ID]
  createAndAdd: [CreateUserInput]
  remove: [ID]
}

input UserWhereInput {
  createdAt: DateWhereInput
  exists: Boolean
  id: IDWhereInput
  updatedAt: DateWhereInput
  username: StringWhereInput
}

type UsersCollection {
  count: Int

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}